#@ load("@ytt:data", "data")
#@ load("@ytt:template", "template")
#@ load("@ytt:assert", "assert")

#@ resource_name = data.values.resource_name or assert.fail("resource name must be specified")
#@ def github_owner():
#@   if resource_name == "cf":
#@     return "cloudfoundry-community"
#@   end
#@  return "concourse"
#@ end

#@ def build_params(resource_name):
  #@ if resource_name == "registry-image":
CONTEXT: #@ resource_name + "-resource"
BUILD_ARG_DOCKER_PRIVATE_PASSWORD: ((registry_image_resource_docker.password))
BUILD_ARG_DOCKER_PRIVATE_REPO: ((registry_image_resource_docker.private_repo))
BUILD_ARG_DOCKER_PRIVATE_USERNAME: ((registry_image_resource_docker.username))

BUILD_ARG_DOCKER_PUSH_PASSWORD: ((registry_image_resource_docker.password))
BUILD_ARG_DOCKER_PUSH_REPO: ((registry_image_resource_docker.push_repo))
BUILD_ARG_DOCKER_PUSH_USERNAME: ((registry_image_resource_docker.username))

BUILD_ARG_GCR_PUSH_SERVICE_ACCOUNT_KEY: ((registry_image_resource_gcr.service_account_key))
BUILD_ARG_GCR_PUSH_REPO: ((registry_image_resource_gcr.repo))
  #@ elif resource_name == "docker-image":
CONTEXT: #@ resource_name + "-resource"
UNPACK_ROOTFS: 'true'
  #@ else:
CONTEXT: #@ resource_name + "-resource"
  #@ end
#@ end

#@ def build_task(resource_name, distro, platform):
task: build
privileged: true
image: oci-build-task
attempts: 2
config:
  platform: linux
  inputs:
  - name: #@ resource_name + "-resource"
  - name: #@ distro
  - name: golang-builder
  outputs:
  - name: built-resource-image
    path: image
  params:
    DOCKERFILE: #@ resource_name + "-resource/dockerfiles/" + distro + "/Dockerfile"
    ADDITIONAL_TARGETS: tests
    BUILD_ARG_base_image: #@ determine_base(distro)
    BUILD_ARG_builder_image: concourse/golang-builder
    IMAGE_PLATFORM: #@ platform
    OUTPUT_OCI: true
    _: #@ template.replace(build_params(resource_name))
  run: {path: build}
#@ end

#@ def build_image(distro):
name: #@ "build-" + distro
serial_groups: [build]
on_failure: &failed-ci
  put: notify
  params:
    mode: normal
    alert_type: failed
plan:
- in_parallel:
  - get: daily-trigger
    trigger: true
  - get: #@ resource_name + "-resource"
    resource: resource-repo
    trigger: true
  - get: #@ distro
    trigger: true
    params: {format: oci, skip_download: true}
  - get: golang-builder
    trigger: true
    params: {format: oci, skip_download: true}
  - get: oci-build-task
  - #@ template.replace(extra_get_steps(distro))
- #@ build_task(resource_name, distro, "linux/amd64,linux/arm64")
- #@ template.replace(extra_steps(distro))
- put: #@ "resource-image-dev-" + distro
  params: {image: built-resource-image/image}
  get_params:
    skip_download: true
#@ end

#@ def scan_task(distro):
task: #@ "scan-" + distro
image: trivy
config:
  platform: linux
  inputs:
  - name: #@ "resource-image-dev-" + distro
    path: image
  - name: trivy-db
  - name: ci
  params: #@ determine_scan_ignore(distro)
  run:
    path: sh
    args:
    - -c
    - |
      mkdir db
      tar -xzf trivy-db/trivy-offline.db.tgz -C ./db

      ignore_policy=""
      if [ -f "$IGNORE_POLICY_FILE" ]; then
        ignore_policy="--ignore-policy $IGNORE_POLICY_FILE"
      fi

      trivy \
        --cache-dir $(pwd) \
        image \
        --severity "HIGH,CRITICAL" \
        --ignore-unfixed \
        --exit-code 1 \
        --input image/image.tar \
        $ignore_policy
on_failure: #@ determine_channel(distro)
on_error: #@ determine_channel(distro)
#@ end

#@ def scan_image():
name: scan-image
plan:
- in_parallel:
  - get: ci
  - get: resource-repo
    passed:
    - build-alpine
    - build-ubuntu
  - get: resource-image-dev-alpine
    passed: [build-alpine]
    params: {format: oci}
    trigger: true
  - get: resource-image-dev-ubuntu
    passed: [build-ubuntu]
    params: {format: oci}
    trigger: true
  - get: trivy
    trigger: true
  - get: trivy-db
    trigger: true
    params: {globs: [trivy-offline.db.tgz]}
- try:
    in_parallel:
      - #@ scan_task("alpine")
      - #@ scan_task("ubuntu")
#@ end

#@ def extra_steps(distro):
  #@ if resource_name == "docker-image":
- task: smoke-test
  image: built-resource-image
  file: docker-image-resource/ci/smoke-test.yml
  privileged: true
  params:
    REPOSITORY: busybox
  output_mapping:
    fetched-image: busybox
- task: use-fetched-image
  image: busybox
  config:
    platform: linux
    run:
      path: /bin/true
  #@ else: return []
#@ end

#@ def determine_base(distro):
#@ if distro == "alpine":
#@   return "alpine"
#@ elif distro == "ubuntu":
#@   return "concourse/resource-types-builder:jammy"
#@ end
#@ end

#@ def determine_channel(distro):
  put: notify
  params:
    mode: normal
    alert_type: failed
#@ end

#@ def determine_scan_ignore(distro):
  #@ if distro == "alpine":
  IGNORE_POLICY_FILE: ci/trivy-ignore/resource-alpine.rego
  #@ else:
  IGNORE_POLICY_FILE: ""
  #@ end
#@ end

#@ def validate_pr(distro):
name: #@ "prs-" + distro
public: true
serial: true
serial_groups:
- validate
plan:
- in_parallel:
  - get: resource-pr
    trigger: true
    version: every
  - get: #@ distro
    trigger: true
    params: {format: oci}
  - get: oci-build-task
  - get: golang-builder
    params: {format: oci}
  - #@ template.replace(extra_get_steps(distro))
- put: #@ resource_name + "-resource"
  resource: resource-pr
  params:
    context: #@ "status-" + distro
    path: resource-pr
    status: pending
- do:
  - #@ build_task(resource_name, distro, "linux/amd64")
  - #@ template.replace(extra_steps(distro))
  on_failure:
    put: resource-pr
    params:
      context: #@ "status-" + distro
      path: resource-pr
      status: failure
  on_success:
    put: resource-pr
    params:
      context: #@ "status-" + distro
      path: resource-pr
      status: success
#@ end


#@ def extra_get_steps(distro):
  #@ if resource_name == "cf":
- get: cf-cli
  trigger: true
  params: {globs: ["cf-cli*linux*"]}
  #@ else: return []
#@ end

#@ def publish_job(bump):
name: #@ "publish-" + bump
plan:
- in_parallel:
  - get: resource-repo
    passed: [scan-image]
  - get: ci
  - get: release-me
  - get: resource-image-dev-alpine
    passed: [scan-image]
    params: {format: oci}
  - get: resource-image-dev-alpine-rootfs
    resource: resource-image-dev-alpine
    passed: [scan-image]
    params: {format: rootfs}
  - get: resource-image-dev-ubuntu
    passed: [scan-image]
    params: {format: oci}
  - get: resource-image-dev-ubuntu-rootfs
    resource: resource-image-dev-ubuntu
    passed: [scan-image]
    params: {format: rootfs}
  - get: version
    params:
      bump: #@ bump
- task: create-release
  config:
    platform: linux
    image_resource:
      type: registry-image
      source:
        repository: ubuntu
        tag: jammy
    inputs:
    - name: version
    - name: resource-image-dev-alpine-rootfs
    - name: resource-image-dev-ubuntu-rootfs
    outputs:
    - name: release
    run:
      path: bash
      args:
      - "-exc"
      #@yaml/text-templated-strings
      - |
        cat <<EOF > resource_metadata.json
        {
          "type": "(@= resource_name @)",
          "version": "$(cat version/number)",
          "privileged": (@= str(privileged()).lower() @),
          "unique_version_history": (@= str(unique_version_history()).lower() @)
        }
        EOF

        version="$(cat version/number)"
        echo "v${version}" > release/name

        pushd resource-image-dev-alpine-rootfs
          cp ../resource_metadata.json .
          tar -czf rootfs.tgz -C rootfs .
          tar -czf ../release/(@= resource_name @)-resource-${version}-alpine.tgz rootfs.tgz resource_metadata.json
        popd

        pushd resource-image-dev-ubuntu-rootfs
          cp ../resource_metadata.json .
          tar -czf rootfs.tgz -C rootfs .
          tar -czf ../release/(@= resource_name @)-resource-${version}-ubuntu.tgz rootfs.tgz resource_metadata.json
        popd
- task: build-release-notes
  file: ci/tasks/build-release-notes.yml
  params:
    GITHUB_OWNER: #@ github_owner()
    GITHUB_REPO: #@ resource_name + "-resource"
    GITHUB_TOKEN: ((concourse_github_dummy.access_token))
    GITHUB_BRANCH: master
  input_mapping:
    repo: resource-repo
- task: generate-dpkg-list
  image: resource-image-dev-ubuntu-rootfs
  config:
    platform: linux
    inputs:
    - name: version
    outputs:
    - name: dpkg-file
    run:
      path: bash
      args:
      - "-exc"
      #@yaml/text-templated-strings
      - |
        VERSION="$(cat version/number)"
        RESOURCE="(@= resource_name @)"
        DPKG_FILE="${RESOURCE}-dpkg-list-${VERSION}.txt"
        dpkg -l > "dpkg-file/${DPKG_FILE}"
- load_var: version
  file: version/version
- in_parallel:
  - put: resource-image
    params:
      image: resource-image-dev-alpine/image.tar
      version: ((.:version))
      bump_aliases: true
    get_params:
      skip_download: true
  - put: resource-image-alpine
    params:
      image: resource-image-dev-alpine/image.tar
      version: ((.:version))
      bump_aliases: true
    get_params:
      skip_download: true
  - put: resource-image-ubuntu
    params:
      image: resource-image-dev-ubuntu/image.tar
      version: ((.:version))
      bump_aliases: true
    get_params:
      skip_download: true
  - put: resource-repo-release
    params:
      commitish: resource-repo/.git/ref
      body: built-notes/notes.md
      globs:
      - release/*.tgz
      name: release/name
      tag: version/version
      tag_prefix: v
- put: dpkg-list-store
  params:
    file: #@ "dpkg-file/" + resource_name + "-dpkg-list-*.txt"
- put: version
  params:
    file: version/version
#@ end

#@ def rebuild_images(distro):
name: #@ "republish-images-" + distro
serial_groups: [build]
on_failure: &failed-ci
  put: notify
  params:
    mode: normal
    alert_type: failed
plan:
- in_parallel:
  - get: daily-trigger
    trigger: true
  - get: #@ resource_name + "-resource"
    resource: resource-repo-tags
  - get: #@ distro
    trigger: true
    params: {format: oci}
  - get: golang-builder
    params: {format: oci}
  - get: oci-build-task
  - get: version
  - get: ci
  - #@ template.replace(extra_get_steps(distro))
- load_var: version
  file: version/version
- #@ build_task(resource_name, distro, "linux/amd64,linux/arm64")
- #@ template.replace(extra_steps(distro))
- task: #@ distro + "-date-tag"
  image: oci-build-task
  file: ci/tasks/tag-version-with-date.yml
  params:
    VERSION: #@ "((.:version))-" + distro
- in_parallel:
  - put: #@ "resource-image-" + distro
    params:
      image: built-resource-image/image
      version: ((.:version))
      bump_aliases: true
      additional_tags: date-tag/tag
    get_params:
      skip_download: true
  #@ if distro == "alpine":
  - put: resource-image
    params:
      image: built-resource-image/image
      version: ((.:version))
      bump_aliases: true
    get_params:
      skip_download: true
  #@ end
#@ end

#@ def unique_version_history():
#@ return resource_name == "time"
#@ end

#@ def privileged():
#@ return resource_name == "docker-image"
#@ end

---
groups:
- name: main
  jobs:
  - prs-*
  - build-*
  - scan-*
  - publish-*
- name: republish
  jobs:
  - republish-*

jobs:
- #@ build_image("alpine")
- #@ build_image("ubuntu")
- #@ scan_image()
- #@ validate_pr("alpine")
- #@ validate_pr("ubuntu")
- #@ publish_job("major")
- #@ publish_job("minor")
- #@ publish_job("patch")
- #@ rebuild_images("alpine")
- #@ rebuild_images("ubuntu")

resource_types:
- name: pull-request
  type: registry-image
  check_every: 2m
  source:
    repository: teliaoss/github-pr-resource

- name: gcs
  type: registry-image
  source:
    repository: frodenas/gcs-resource

- name: slack-notifier
  type: registry-image
  #! Switch back to mockersf/concourse-slack-notifier once
  #! https://github.com/mockersf/concourse-slack-notifier/pull/86 is merged
  source: {repository: aoldershaw/concourse-slack-notifier}

  #! TODO: get rid of this when registry image resource v1.6.0 is deployed in CI
- name: registry-image
  type: registry-image
  source:
    repository: concourse/registry-image-resource
    tag: 1.6.0

resources:
- name: alpine
  type: registry-image
  icon: docker
  source:
    repository: alpine
    tag: latest
    username: ((docker.username))
    password: ((docker.password))

- name: ubuntu
  type: registry-image
  icon: docker
  source:
    #! we need to tweak original image for ARM build
    repository: concourse/resource-types-builder
    tag: jammy
    username: ((docker.username))
    password: ((docker.password))

- name: golang-builder
  type: registry-image
  icon: docker
  source:
    repository: concourse/golang-builder
    variant: jammy
    username: ((docker.username))
    password: ((docker.password))

- name: trivy
  type: registry-image
  icon: docker
  source:
    repository: aquasec/trivy
    username: ((docker.username))
    password: ((docker.password))

- name: trivy-db
  type: github-release
  icon: database
  source:
    owner: aquasecurity
    repository: trivy-db
    access_token: ((concourse_github_dummy.access_token))

- name: resource-repo
  type: git
  icon: github
  source:
    branch: master
    private_key: ((concourse_bot_private_key))
    uri: #@ "git@github.com:concourse/" + resource_name + "-resource"

- name: resource-repo-tags
  type: git
  icon: github
  source:
    branch: master
    private_key: ((concourse_bot_private_key))
    uri: #@ "git@github.com:concourse/" + resource_name + "-resource"
    tag_filter: "v*"

- name: resource-repo-release
  type: github-release
  icon: package-variant-closed
  source:
    access_token: ((concourse_bot_access_token))
    owner: #@ github_owner()
    repository: #@ resource_name + "-resource"

- name: version
  type: semver
  icon: tag
  source:
    branch: version
    driver: git
    file: version
    private_key: ((concourse_bot_private_key))
    uri: #@ "git@github.com:" + github_owner() + "/" + resource_name + "-resource"

- name: resource-pr
  type: pull-request
  icon: source-pull
  check_every: 2m
  source:
    access_token: ((pull_requests_access_token))
    base_branch: master
    repository: #@ github_owner() + "/" + resource_name + "-resource"

- name: resource-image
  type: registry-image
  icon: docker
  source:
    repository: #@ "concourse/" + resource_name + "-resource"
    username: ((docker.username))
    password: ((docker.password))

- name: resource-image-alpine
  type: registry-image
  icon: docker
  source:
    repository: #@ "concourse/" + resource_name + "-resource"
    variant: alpine
    username: ((docker.username))
    password: ((docker.password))

- name: resource-image-ubuntu
  type: registry-image
  icon: docker
  source:
    repository: #@ "concourse/" + resource_name + "-resource"
    variant: ubuntu
    username: ((docker.username))
    password: ((docker.password))

- name: resource-image-dev-alpine
  type: registry-image
  icon: docker
  source:
    repository: #@ "concourse/" + resource_name + "-resource"
    tag: dev
    password: ((docker.password))
    username: ((docker.username))

- name: resource-image-dev-ubuntu
  type: registry-image
  icon: docker
  source:
    password: ((docker.password))
    repository: #@ "concourse/" + resource_name + "-resource"
    tag: dev-ubuntu
    username: ((docker.username))

- name: dpkg-list-store
  type: gcs
  source:
    bucket: concourse-ubuntu-dpkg-list
    json_key: ((concourse_dpkg_list_json_key))
    regexp: #@ resource_name + "-dpkg-list-(.*).txt"

- name: ci
  type: git
  icon: github
  source:
    uri: https://github.com/concourse/ci.git
    branch: master

- name: release-me
  type: github-release
  icon: package-down
  source:
    owner: clarafu
    repository: release-me
    access_token: ((concourse_github_dummy.access_token))

- name: oci-build-task
  type: registry-image
  icon: docker
  source:
    repository: concourse/oci-build-task

- name: notify
  type: slack-notifier
  icon: slack
  source:
    url: ((slack_hooks.concourse-interrupt))
    username: ((basic_auth.username))
    password: ((basic_auth.password))
    concourse_url: https://ci.concourse-ci.org

- name: daily-trigger
  type: time
  source:
    start: 1AM
    stop: 2AM

#@ if resource_name == "cf":
- name: cf-cli
  type: s3
  source:
    bucket: cf-cli-releases
    regexp: "releases/v([\\d\\.]+)/cf-cli_.*_linux_x86-64.tgz"
    region_name: us-west-1
#@ end
